# By Fadi Al-Ghawanmeh. This script calculates absolute statistics on main musical features extracted from text-based musical datasets. Mean and standard deviation of each feature is calculated per sentence. Each sentence occupies one text line. The letters from a to g represent scale degrees, and the numbers from 1 to 8 represent quantized durations. The considered features are: note count, unique scale-degree count, scale-degree range, average quantized duration and average musical interval. The measures for these features are adapted from measures presented in (Yang and Lerch 2020: On the evaluation of generative models in music).


from __future__ import division
import statistics as stat


# average note count per line  AverageNoteCount
def AverageNoteCount(lines):
  noteCountList = []
  
  for l in lines:
    noteCount = len(l) - l.count(' ') - l.count('\n')
    #each note has two elements: scale degree and quantized duration
    noteCount =noteCount /2.0
    #print(noteCount)
    noteCountList.append(noteCount)


  average = stat.mean(noteCountList)
  std = stat.stdev(noteCountList)
  #print ("meanOfAverage and stdOfAverage are ",meanOfAverage," ",stdOfAverage)
  return round(average,2), round(std,2)




# average count of quantized durations per line AverageQuantizedDuration
def AverageQuantizedDuration(lines):
  theAverageQuantizedDuration = 0
  AverageQD=[]
  for l in lines:


    my_str = l
    #print("initial string : ", my_str)


    # using join and isdigit to remove numeric digits from string
    my_str = ''.join([i for i in my_str if not i.isalpha()])


    #print("final string : ", my_str)


    #unique_words = set(my_str.split())
    #print(unique_words)


    res = [eval(i) for i in my_str.split()]
    
    #print("int array : ", res)


    Resmean= stat.mean(res)
    #print("mean : ", Resmean)
    theAverageQuantizedDuration= theAverageQuantizedDuration+Resmean
    AverageQD.append(Resmean)
    #length = length + len(unique_words)


  #print("AverageQD list", AverageQD)


  meanOfAverageQD = stat.mean(AverageQD)
  stdOfAverageQD = stat.stdev(AverageQD)
  #print ("meanOfAverageQD and stdOfAverageQD are ",meanOfAverageQD," ",stdOfAverageQD)


  
  
  return round(meanOfAverageQD, 2),round(stdOfAverageQD, 2)


  
# average count of unique scale-degree per line AverageUniqueScaleDegrees
# (Pitch Count)
def AverageUniqueScaleDegrees(lines):
  uniqueList = [] 
  for l in lines:


    my_str = l
    #print("initial string : ", my_str)


    # using join and isdigit to remove numeric digits from string
    my_str = ''.join([i for i in my_str if not i.isdigit()])
    
    #print("final string : ", my_str)


    
    unique_words = set(my_str.split())
    #print(unique_words)  


    uniqueList.append(len(unique_words))


  #print("uniqueList : ",uniqueList)
  average = stat.mean(uniqueList)
  std = stat.stdev(uniqueList)
  #print ("average and std are ",average," ",std)


  return round(average,2), round(std,2)






# average scale degree range per line   AverageScaleDegreeRange
def AverageScaleDegreeRange(lines):
  #sumOfRanges = 0
  ranges= []
  for l in lines:


    my_str = l
    #print("initial string : ", my_str)


    # using join and isdigit to remove numeric digits from string
    my_str = ''.join([i for i in my_str if not i.isdigit()])


    #print("final string : ", my_str)


    unique_words = set(my_str.split())
    #print("unique words : ",unique_words)


    for degree in unique_words:
      if degree == 'a':
        unique_words.update('1')
        unique_words.remove('a')
      elif degree == 'b':
        unique_words.update('2')
        unique_words.remove('b')
      elif degree == 'c':
        unique_words.update('3')
        unique_words.remove('c')
      elif degree == 'd':
        unique_words.update('4')
        unique_words.remove('d')
      elif degree == 'e':
        unique_words.update('5')
        unique_words.remove('e')
      elif degree == 'f':
        unique_words.update('6')
        unique_words.remove('f')
      elif degree == 'g':
        unique_words.update('7')
        unique_words.remove('g')
        
       
    #print("unique_words : ", unique_words)


    #repeat the loop again to avoid less frequent errors
    for degree in unique_words:
      if degree == 'a':
        unique_words.update('1')
        unique_words.remove('a')
      elif degree == 'b':
        unique_words.update('2')
        unique_words.remove('b')
      elif degree == 'c':
        unique_words.update('3')
        unique_words.remove('c')
      elif degree == 'd':
        unique_words.update('4')
        unique_words.remove('d')
      elif degree == 'e':
        unique_words.update('5')
        unique_words.remove('e')
      elif degree == 'f':
        unique_words.update('6')
        unique_words.remove('f')
      elif degree == 'g':
        unique_words.update('7')
        unique_words.remove('g')
        
       
    #print("unique_words : ", unique_words)
   
   
    unique_degrees = set(map(int, unique_words))
    #print("unique_degrees : ", unique_degrees)
    max_degree=max(unique_degrees)
    min_degree=min(unique_degrees)
    range = max_degree - min_degree
    #print("max_degree : ", max_degree)
    #print("min_degree : ", min_degree)
    #print("range : ", range)


    if range==6:
      range=1
    elif range==5:
      range=2
    elif range==4:
      range=3




    ranges.append(range)


  meanOfRanges = stat.mean(ranges)
  stdOfRanges = stat.stdev(ranges)
  #print ("meanOfRanges and stdOfRanges are ",meanOfRanges," ",stdOfRanges)
   
  #print ("the list ranges", ranges)
  return round(meanOfRanges,2), round(stdOfRanges,2)


  


# average scale degree interval per line   AverageScaleDegreeI interval
def AverageScaleDegreeInterval(lines):
  linesMeanlist=[]
  linesSTDlist=[]
  for l in lines:


    degreeString = l
    #print("initial string : ", degreeString)


    # using join and isdigit to remove numeric digits from string
    degreeString = ''.join([i for i in degreeString if not i.isdigit()])


    #print("final string : ", degreeString)


    degreelist = degreeString.split()
   # print("degreelist : ", degreelist)


    
    degreeListNumerical = []
  


    for degree in degreelist:
      if degree == 'a':
        degreeListNumerical.append(1)
      elif degree == 'b':
        degreeListNumerical.append(2)
      elif degree == 'c':
        degreeListNumerical.append(3)
      elif degree == 'd':
        degreeListNumerical.append(4)
      elif degree == 'e':
        degreeListNumerical.append(5)
      elif degree == 'f':
        degreeListNumerical.append(6)
      elif degree == 'g':
        degreeListNumerical.append(7)
        
    #print("degreeListNumerical : ", degreeListNumerical)




    intervalListNumerical = []


    i = 1
    while i < len(degreeListNumerical):
      temp = abs(degreeListNumerical[i]-degreeListNumerical[i-1])
      if temp==6:
        temp=1
      elif temp==5:
        temp=2
      elif temp==4:
        temp=3
      intervalListNumerical.append(temp)
      i += 1


    #when only one note in the sentence. the interval is considered 0 (i.e. no interval change)
    if len(intervalListNumerical)==0:
      intervalListNumerical.append(0)
    
    #print("intervalListNumerical : ",         intervalListNumerical,'\n')
    mean = stat.mean(intervalListNumerical)
    
    #print("average of intervalListNumerical : ", mean)


    linesMeanlist.append(mean)
  #print("linesMeanlist = ",linesMeanlist)
  meanOfAverage = stat.mean(linesMeanlist)
  stdOfAverage = stat.stdev(linesMeanlist)
  #print ("meanOfAverage and stdOfAverage are ",meanOfAverage," ",stdOfAverage)
  
  
  #return float(sumOfRanges / len(lines))
  return round(meanOfAverage,2),round(stdOfAverage,2)


















#with open('./test.txt') as f:


with open('./autoTaqasim.txt') as f:
#with open('./SabaIstihlal.oud.txt') as f:


#with open('./OverSegmentedMinusTwelveMatrix_DegreeDuration.test.clean.oud.txt') as f:


  my_lines = f.readlines()
  
  theAverageNoteCount = AverageNoteCount(my_lines)
  print("theAverageNoteCount, and STD : \n",theAverageNoteCount,"\n")
  
  theAverageQuantizedDuration = AverageQuantizedDuration(my_lines)
  print("theAverageQuantizedDuration, and STD :\n",theAverageQuantizedDuration,"\n")


  theAverageUniqueScaleDegrees=AverageUniqueScaleDegrees(my_lines)
  print("theAverageUniqueScaleDegrees, and std :\n",theAverageUniqueScaleDegrees,"\n")


  TheAverageScaleDegreeRange = AverageScaleDegreeRange(my_lines)
  print("TheAverageScaleDegreeRange, and STD :\n",TheAverageScaleDegreeRange,"\n")


  TheAverageScaleDegreeInterval = AverageScaleDegreeInterval(my_lines)
  print("TheAverageScaleDegreeInterval, and std : \n",TheAverageScaleDegreeInterval)